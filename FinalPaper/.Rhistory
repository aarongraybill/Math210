d <-
data.table::fread("/Users/aarongraybill/Downloads/Trade_DetailedTradeMatrix_E_All_Data/Trade_DetailedTradeMatrix_E_All_Data.csv",showProgress=T)
ebd_US.AL.101_201801_201801_relMay.2018 <- read.delim("~/Downloads/ebd_US-AL-101_201801_201801_relMay-2018_SAMPLE/ebd_US-AL-101_201801_201801_relMay-2018.txt")
View(ebd_US.AL.101_201801_201801_relMay.2018)
d <-
data.table::fread("/Users/aarongraybill/Downloads/Trade_DetailedTradeMatrix_E_All_Data/Trade_DetailedTradeMatrix_E_All_Data.csv",showProgress=T)
knitr::opts_chunk$set(echo = FALSE)
knitr::include_app("<iframe src="https://en.wikipedia.org/w/index.php?title=Beyonc%C3%A9&printable=yes"></iframe>")
ggraph(net.tidy, layout = "linear", circular = TRUE) +
geom_edge_arc(aes(width = weight), alpha = 0.8) +
scale_edge_width(range = c(0.2, 2)) +
geom_node_text(aes(label = label), repel = TRUE) +
labs(edge_width = "Number of calls") +
theme_graph()+
theme(legend.position = "top")
library(tidygraph)
install.packages("tidygraph")
library(tidygraph)
library(tidygraph)
#  Get distinct source names
sources <- phone.call %>%
distinct(source) %>%
rename(label = source)
library("navdata")
install.packages("navdata")
library("navdata")
library(tidygraph)
# Libraries ---------------------------------------------------------------
library(visNetwork)
install.packages(c("visNetowork","geomnet","igraph"))
knitr::opts_chunk$set(echo = FALSE)
# Libraries ---------------------------------------------------------------
library(visNetwork)
library(geomnet)
library(geomnet)
library(igraph)
# Data Preparation --------------------------------------------------------
#Load dataset
data(lesmis)
#Nodes
nodes <- as.data.frame(lesmis[2])
colnames(nodes) <- c("id", "label")
#id has to be the same like from and to columns in edges
nodes$id <- nodes$label
#Edges
edges <- as.data.frame(lesmis[1])
colnames(edges) <- c("from", "to", "width")
#Create graph for Louvain
graph <- graph_from_data_frame(edges, directed = FALSE)
#Louvain Comunity Detection
cluster <- cluster_louvain(graph)
cluster_df <- data.frame(as.list(membership(cluster)))
cluster_df <- as.data.frame(t(cluster_df))
cluster_df$label <- rownames(cluster_df)
#Create group column
nodes <- left_join(nodes, cluster_df, by = "label")
#Create group column
library(dplyr)
nodes <- left_join(nodes, cluster_df, by = "label")
colnames(nodes)[3] <- "group"
visNetwork(nodes, edges)
knitr::opts_chunk$set(echo = FALSE,message=F,warning=F)
## Sample Network
```{r}
visNetwork(nodes, edges)
```
visNetwork(nodes, edges)
visNetwork(nodes, edges)
?graph_from_data_frame
plot(graph)
data(diamonds)
force(diamonds)
force(diamonds)
data(diamons)
data(diamonds)
diamondsa$clarity
diamonds$clarity
View(lesmis)
#Create graph for Louvain
graph <- graph_from_data_frame(edges, directed = T)
plot(graph)
plot(graph)
?visNetwork
visNetwork(nodes, edges) %>%
visEdges(arrows = 'from', scaling = list(min = 2, max = 2))
View(nodes)
lesmis[2]
# Data Preparation --------------------------------------------------------
#Load dataset
data(lesmis)
#Nodes
nodes <- as.data.frame(lesmis[2])
nodes
colnames(nodes) <- c("id", "label")
# Data Preparation --------------------------------------------------------
#Load dataset
data(lesmis)
#Nodes
nodes <- as.data.frame(lesmis[2])
colnames(nodes) <- c("id", "label")
lesmis[2]
View(lesmis[2])
nodes <- as.data.frame(lesmis[2])
colnames(nodes) <- c("id", "label")
view(nodes)
View(nodes)
#id has to be the same like from and to columns in edges
nodes$id <- nodes$label
View(nodes)
lesmis[1]
nodes <- data.frame(id=c("France","Italy","Germany"),label=c("France","Italy","Germany"))
edges <- as.data.frame(
from=c("France","France","Italy","Italy","Germany","Germany"),
to=c("Italy","Germany","France","Germany","France","Italy"),
width=c(5,5,4,1,4,3)
)
edges <- data.frame(
from=c("France","France","Italy","Italy","Germany","Germany"),
to=c("Italy","Germany","France","Germany","France","Italy"),
width=c(5,5,4,1,4,3)
)
#Create graph for Louvain
graph <- graph_from_data_frame(edges, directed = F)
visNetwork(nodes, edges) %>%
visEdges(arrows = 'from', scaling = list(min = 2, max = 2))
nodes <- data.frame(id=c("France","Italy","Germany"),label=c("France","Italy","Germany"))
edges <- data.frame(
from=c("France","France","Italy","Italy","Germany","Germany"),
to=c("Italy","Germany","France","Germany","France","Italy"),
width=c(50,50,40,10,40,30)
)
#Create graph for Louvain
graph <- graph_from_data_frame(edges, directed = F)
visNetwork(nodes, edges) %>%
visEdges(arrows = 'from', scaling = list(min = 2, max = 2))
nodes <- data.frame(id=c("France","Italy","Germany"),label=c("France","Italy","Germany"))
edges <- data.frame(
from=c("France","France","Italy","Italy","Germany","Germany"),
to=c("Italy","Germany","France","Germany","France","Italy"),
width=c(10,5,4,1,4,3)
)
visNetwork(nodes, edges) %>%
visEdges(arrows = 'from', scaling = list(min = 2, max = 2))
```{r, fig.align="left",out.width="50%",out.height="90%"}
# visNetwork(nodes, edges) %>%
#  visEdges(arrows = 'from', scaling = list(min = 2, max = 2))
plot(pressure)
visNetwork(nodes, edges) %>%
visEdges(arrows = 'from', scaling = list(min = 2, max = 2))
library(tidygraph)
# Libraries ---------------------------------------------------------------
library(visNetwork)
library(geomnet)
library(igraph)
nodes <- data.frame(id=c("France","Italy","Germany","Switzerland"),label=c("France","Italy","Germany","Switzerland"))
edges <- data.frame(
from=c("France","France","Italy","Italy","Germany","Germany","Germany","France","Italy"),
to=c("Italy","Germany","France","Germany","France","Italy","Switzerland","Switzerland","Switzerland"),
width=c(10,5,4,1,4,3,.5,.5,.5)
)
# graph <- graph_from_data_frame(edges, directed = F)
# https://www.r-bloggers.com/2019/06/interactive-network-visualization-with-r/
visNetwork(nodes, edges) %>%
visEdges(arrows = 'from', scaling = list(min = 2, max = 2))
visNetwork(nodes, edges) %>%
visEdges(arrows = 'to', scaling = list(min = 2, max = 2))
nodes <- data.frame(id=c("France","Italy","Germany","Switzerland"),label=c("France","Italy","Germany","Switzerland"))
edges <- data.frame(
from=c("France","France","Italy","Italy","Germany","Germany","Switzerland","Switzerland","Switzerland"),
to=c("Italy","Germany","France","Germany","France","Italy","Germany","France","Italy"),
width=c(10,5,4,1,4,3,.5,.5,.5)
)
visNetwork(nodes, edges) %>%
visEdges(arrows = 'to', scaling = list(min = 2, max = 2))
visNetwork(nodes, edges) %>%
visEdges(arrows = 'to')
visNetwork(nodes, edges) %>%
visEdges(arrows = 'to', scaling = list(min = 0, max = 2))
visNetwork(nodes, edges) %>%
visEdges(arrows = 'to', scaling = list(min = 4, max = 2))
visNetwork(nodes, edges) %>%
visEdges(arrows = 'to', scaling = list(min = 4, max = 10))
visNetwork(nodes, edges) %>%
visEdges(arrows = 'to', scaling = list(min = 4, max = 10))
visNetwork(nodes, edges) %>%
visEdges(arrows = 'to', scaling = list(min = 4, max = 10))
set.seed(1)
visNetwork(nodes, edges) %>%
visEdges(arrows = 'to', scaling = list(min = 4, max = 10))
set.seed(1)
visNetwork(nodes, edges) %>%
visEdges(arrows = 'to', scaling = list(min = 4, max = 10))
?visEdges
visNetwork(nodes, edges) %>%
visEdges(arrows = 'to', scaling = list(min = 4, max = 10),shadow=T)
visNetwork(nodes, edges) %>%
visEdges(arrows = 'to', scaling = list(min = 4, max = 10),color = list(color = "red", highlight = "yellow"))
visNetwork(nodes, edges) %>%
visEdges(arrows = 'to', scaling = list(min = 4, max = 10),color = list( highlight = "#ffd1dc"))
nodes <- data.frame(id=c("France","Italy","Germany","Switzerland","Source"),label=c("France","Italy","Germany","Switzerland","Source"))
edges <- data.frame(
from=c("France","France","Italy","Italy","Germany","Germany","Switzerland","Switzerland","Switzerland","Germany","Germany","France"),
to=c("Italy","Germany","France","Germany","France","Italy","Germany","France","Italy","Source","Source","Source"),
width=c(10,5,4,1,4,3,.5,.5,.5,1,1,1)
)
# graph <- graph_from_data_frame(edges, directed = F)
# https://www.r-bloggers.com/2019/06/interactive-network-visualization-with-r/
visNetwork(nodes, edges) %>%
visEdges(arrows = 'from', scaling = list(min = 4, max = 10),color = list( highlight = "#ffd1dc"))
edges <- data.frame(
from=c("France","France","Italy","Italy","Germany","Germany","Switzerland","Switzerland","Switzerland","Italy","Germany","France"),
to=c("Italy","Germany","France","Germany","France","Italy","Germany","France","Italy","Source","Source","Source"),
width=c(10,5,4,1,4,3,.5,.5,.5,1,1,1)
)
# graph <- graph_from_data_frame(edges, directed = F)
# https://www.r-bloggers.com/2019/06/interactive-network-visualization-with-r/
visNetwork(nodes, edges) %>%
visEdges(arrows = 'from', scaling = list(min = 4, max = 10),color = list( highlight = "#ffd1dc"))
# graph <- graph_from_data_frame(edges, directed = F)
# https://www.r-bloggers.com/2019/06/interactive-network-visualization-with-r/
visNetwork(nodes, edges) %>%
visEdges(arrows = 'from', scaling = list(min = 4, max = 10),color = list( highlight = "#ffd1dc"))
sample(d)
knitr::kable(d[sample_row,])
sample_row <-
sample(length(d),10)
knitr::kable(d[sample_row,])
sample_row <-
sample(length(d),10)
sample_row
length(d)
sample(10000,10)
sample_row <-
sample(nrows(d),10)
knitr::kable(d[sample_row,])
set.seed(3.14)
sample_row <-
sample(nrow(d),10)
knitr::kable(d[sample_row,])
View(d)
library(reticulate)
py_install("itertools")
?def
knitr::opts_chunk$set(echo = FALSE,message=F,warning=F)
library(tidygraph)
# Libraries ---------------------------------------------------------------
library(visNetwork)
library(geomnet)
library(igraph)
nodes <- data.frame(id=c("France","Italy","Germany","Switzerland"),label=c("France","Italy","Germany","Switzerland"))
edges <- data.frame(
from=c("France","France","Italy","Italy","Germany","Germany","Switzerland","Switzerland","Switzerland"),
to=c("Italy","Germany","France","Germany","France","Italy","Germany","France","Italy"),
width=c(10,5,4,1,4,3,.5,.5,.5)
)
# graph <- graph_from_data_frame(edges, directed = F)
# https://www.r-bloggers.com/2019/06/interactive-network-visualization-with-r/
nodes <- data.frame(id=c("France","Italy","Germany","Switzerland"),label=c("France","Italy","Germany","Switzerland"))
edges <- data.frame(
from=c("France","France","Italy","Italy","Germany","Germany","Switzerland","Switzerland","Switzerland"),
to=c("Italy","Germany","France","Germany","France","Italy","Germany","France","Italy"),
width=c(10,5,4,1,4,3,.5,.5,.5)
)
# graph <- graph_from_data_frame(edges, directed = F)
# https://www.r-bloggers.com/2019/06/interactive-network-visualization-with-r/
visNetwork(nodes, edges) %>%
visEdges(arrows = 'to', scaling = list(min = 4, max = 10),color = list( highlight = "#ffd1dc"))
nodes <- data.frame(id=c("France","Italy","Germany","Switzerland"),label=c("France","Italy","Germany","Switzerland"))
edges <- data.frame(
from=c("France","France","Italy","Italy","Germany","Germany","Switzerland","Switzerland","Switzerland"),
to=c("Italy","Germany","France","Germany","France","Italy","Germany","France","Italy"),
width=c(10,5,4,1,4,3,.5,.5,.5)
)
# graph <- graph_from_data_frame(edges, directed = F)
# https://www.r-bloggers.com/2019/06/interactive-network-visualization-with-r/
visNetwork(nodes, edges) %>%
visEdges(arrows = 'to', scaling = list(min = 4, max = 10),color = list( highlight = "#ffd1dc"))
nodes <- data.frame(id=c("France","Italy","Germany","Switzerland","Sink"),label=c("France","Italy","Germany","Switzerland","Sink"))
edges <- data.frame(
from=c("France","France","Italy","Italy","Germany","Germany","Switzerland","Switzerland","Switzerland","Italy","Germany","France"),
to=c("Italy","Germany","France","Germany","France","Italy","Germany","France","Italy","Sink","Sink","Sink"),
width=c(10,5,4,1,4,3,.5,.5,.5,1,1,1)
)
# graph <- graph_from_data_frame(edges, directed = F)
# https://www.r-bloggers.com/2019/06/interactive-network-visualization-with-r/
visNetwork(nodes, edges) %>%
visEdges(arrows = 'to', scaling = list(min = 4, max = 10),color = list( highlight = "#ffd1dc"))
knitr::opts_chunk$set(echo = FALSE,message=F,warning=F)
library(tidygraph)
# Libraries ---------------------------------------------------------------
library(visNetwork)
library(geomnet)
library(igraph)
nodes <- data.frame(id=c("France","Italy","Germany","Switzerland"),label=c("France","Italy","Germany","Switzerland"))
edges <- data.frame(
from=c("France","France","Italy","Italy","Germany","Germany","Switzerland","Switzerland","Switzerland"),
to=c("Italy","Germany","France","Germany","France","Italy","Germany","France","Italy"),
width=c(10,5,4,1,4,3,.5,.5,.5)
)
# graph <- graph_from_data_frame(edges, directed = F)
# https://www.r-bloggers.com/2019/06/interactive-network-visualization-with-r/
nodes <- data.frame(id=c("France","Italy","Germany","Switzerland"),label=c("France","Italy","Germany","Switzerland"))
edges <- data.frame(
from=c("France","France","Italy","Italy","Germany","Germany","Switzerland","Switzerland","Switzerland"),
to=c("Italy","Germany","France","Germany","France","Italy","Germany","France","Italy"),
width=c(10,5,4,1,4,3,.5,.5,.5)
)
# graph <- graph_from_data_frame(edges, directed = F)
# https://www.r-bloggers.com/2019/06/interactive-network-visualization-with-r/
visNetwork(nodes, edges) %>%
visEdges(arrows = 'to', scaling = list(min = 4, max = 10),color = list( highlight = "#ffd1dc"))
nodes <- data.frame(id=c("France","Italy","Germany","Switzerland"),label=c("France","Italy","Germany","Switzerland"))
edges <- data.frame(
from=c("France","France","Italy","Italy","Germany","Germany","Switzerland","Switzerland","Switzerland"),
to=c("Italy","Germany","France","Germany","France","Italy","Germany","France","Italy"),
width=c(10,5,4,1,4,3,.5,.5,.5)
)
# graph <- graph_from_data_frame(edges, directed = F)
# https://www.r-bloggers.com/2019/06/interactive-network-visualization-with-r/
visNetwork(nodes, edges) %>%
visEdges(arrows = 'to', scaling = list(min = 4, max = 10),color = list( highlight = "#ffd1dc"))
nodes <- data.frame(id=c("France","Italy","Germany","Switzerland","Sink"),label=c("France","Italy","Germany","Switzerland","Sink"))
edges <- data.frame(
from=c("France","France","Italy","Italy","Germany","Germany","Switzerland","Switzerland","Switzerland","Italy","Germany","France"),
to=c("Italy","Germany","France","Germany","France","Italy","Germany","France","Italy","Sink","Sink","Sink"),
width=c(10,5,4,1,4,3,.5,.5,.5,1,1,1)
)
# graph <- graph_from_data_frame(edges, directed = F)
# https://www.r-bloggers.com/2019/06/interactive-network-visualization-with-r/
visNetwork(nodes, edges) %>%
visEdges(arrows = 'to', scaling = list(min = 4, max = 10),color = list( highlight = "#ffd1dc"))
View(edges)
library(readr)
data <- read_csv("~/Downloads/data.csv")
View(data)
plot(data$swiss_shock,data$costs)
cor(data[,-1])
hist(data$swiss_shock)
hist(data$swiss_shock+data$french_shock+data$germ_shock)
hist(data$swiss_shock+data$french_shock)
plot(data$swiss_shock[data$swiss_shock>2.5],data$costs[data$swiss_shock>2.5])
plot(data$swiss_shock[data$swiss_shock<2.5],data$costs[data$swiss_shock<2.5])
plot(data$swiss_shock[data$swiss_shock<2.25],data$costs[data$swiss_shock<2.25])
lm(costs~swiss_shock+french_shock,data=data)
lm(costs~swiss_shock+french_shock,data=data) %>% summary
lm(costs~swiss_shock+french_shock,data=data) %>% summary()
library(dplyr)
lm(costs~swiss_shock+french_shock,data=data) %>% summary()
plot(data$frenhc_shock,data$costs)
plot(data$french_shock,data$costs)
data[, "max"] <- apply(data[, 2:4], 1, max)
View(data)
data[, "max"] <- apply(data[, 3:5], 1, max)
plot(data$max,data$costs)
data[, "max"] <- apply(data[, 3:6], 1, max)
plot(data$max,data$costs)
library(readr)
data_1_ <- read_csv("~/Downloads/data (1).csv")
View(data_1_)
d <- data_1_
View(d)
colnames(d) <- c("iteration","cost","swiss_shock","french_shock","germ_shock","italy_shock","feasible")
View(d)
library(ggplot2)
ggplot(d)+
geom_point(aes(x=swiss_shock,y=cost,col=feasible))
ggplot(d)+
geom_point(aes(x=swiss_shock,y=cost,col=as.factor(feasible)))
ggplot(d %>% filter(feasible==1))+
geom_point(aes(x=swiss_shock,y=cost,col=as.factor(feasible)))
d[, "max"] <- apply(d[, 3:6], 1, max)
ggplot(d %>% filter(feasible==1))+
geom_point(aes(x=max,y=cost,col=as.factor(feasible)))
ggplot(d)+
geom_point(aes(x=max,y=cost,col=as.factor(feasible)))
plot(d$swiss_shock,d$french_shock)
library(readr)
d <- read_csv("~/Downloads/data.csv")
View(d)
colnames(d) <- c("iteration","cost","swiss_shock","french_shock","germ_shock","italy_shock","feasible")
d[, "max"] <- apply(d[, 3:6], 1, max)
ggplot(d)+
geom_point(aes(x=max,y=cost,col=as.factor(feasible)))
ggplot(d)+
geom_point(aes(x=swiss_cost,y=cost,col=as.factor(feasible)))
ggplot(d)+
geom_point(aes(x=swiss_shock,y=cost,col=as.factor(feasible)))
ggplot(d)+
geom_point(aes(x=french_shock,y=cost,col=as.factor(feasible)))
ggplot(d)+
geom_point(aes(x=germ_shock,y=cost,col=as.factor(feasible)))
ggplot(d)+
geom_point(aes(x=italy_shock,y=cost,col=as.factor(feasible)))
source('~/Documents/GitHub/Math210/FinalPaper/Data_read_temp.R', echo=TRUE)
d <- read.csv("/Users/aarongraybill/Downloads/data.csv")
colnames(d) <- c("iteration","cost","swiss_shock","french_shock","germ_shock","italy_shock","swiss_rho","french_rho","germ_rho","italy_rho","feasible")
View(d)
d[, "max"] <- apply(d[, 3:6], 1, max)
ggplot(d)+
geom_point(aes(x=swiss_shock,y=cost,col=as.factor(feasible)))
library(ggplot2)
ggplot(d)+
geom_point(aes(x=swiss_shock,y=cost,col=as.factor(feasible)))
ggplot(d)+
geom_point(aes(x=italy_shock,y=cost,col=as.factor(feasible)))
ggplot(d)+
geom_point(aes(x=french_shock,y=cost,col=as.factor(feasible)))
ggplot(d)+
geom_point(aes(x=french_rho,y=cost,col=as.factor(feasible)))
ggplot(d)+
geom_point(aes(x=swiss_rho,y=cost,col=as.factor(feasible)))
d[, "max_shock"] <- apply(d[, 3:6], 1, max)
d[, "max_rho"] <- apply(d[, 7:11], 1, max)
library(ggplot2)
ggplot(d)+
geom_point(aes(x=swiss_rho,y=cost,col=as.factor(feasible)))
ggplot(d)+
geom_point(aes(xmax_shock,y=cost,col=as.factor(feasible)))
ggplot(d)+
geom_point(aes(x=max_shock,y=cost,col=as.factor(feasible)))
d[, "max_shock"] <- apply(d[, 3:6], 1, max)
d[, "max_rho"] <- apply(d[, 7:10], 1, max)
library(ggplot2)
ggplot(d)+
geom_point(aes(x=max_shock,y=cost,col=as.factor(feasible)))
ggplot(d)+
geom_point(aes(x=max_rho,y=cost,col=as.factor(feasible)))
ggplot(d)+
geom_point(aes(x=max_rho,y=max_sigma,col=as.factor(feasible)))
ggplot(d)+
geom_point(aes(x=max_rho,y=max_shock,col=as.factor(feasible)))
ggplot(d)+
geom_point(aes(x=swiss_rho,y=swiss_shock,col=as.factor(feasible)))
ggplot(d)+
geom_point(aes(x=swiss_rho,y=french_shock,col=as.factor(feasible)))
ggplot(d)+
geom_point(aes(x=swiss_rho,y=swiss_shock,col=as.factor(feasible)))
ggplot(d)+
geom_point(aes(x=french_rho,y=french_shock,col=as.factor(feasible)))
ggplot(d)+
geom_point(aes(x=swiss_rho,y=swiss_shock,col=swiss_rho/swiss_shock))
ggplot(d)+
geom_point(aes(x=swiss_rho,y=swiss_shock,col=(swiss_rho/swiss_shock)))
?scale_color_continuous
ggplot(d)+
geom_point(aes(x=swiss_rho,y=swiss_shock,col=as.factor(feasible),size={swiss_rho/swiss_shock}))
ggplot(d)+
ggplot(d)+
geom_point(aes(x=swiss_rho,y=swiss_shock,col=as.factor(feasible),size=(swiss_rho/swiss_shock)))
ggplot(d)+
geom_point(aes(x=swiss_rho,y=swiss_shock,col=as.factor(feasible),size=(swiss_rho/swiss_shock)))
ggplot(d)+
geom_point(aes(x=french_rho,y=french_shock,col=as.factor(feasible),size=(swiss_rho/swiss_shock)))
hist(d$swiss_shock/d$swiss_rho)
hist(log(d$swiss_shock/d$swiss_rho))
ggplot(d)+
geom_point(aes(x=french_rho,y=french_shock,col=as.factor(feasible),size=log((swiss_rho/swiss_shock))))
ggplot(d)+
geom_point(aes(x=french_rho,y=french_shock,col=as.factor(feasible),size=(log((swiss_rho/swiss_shock)))))
ggplot(d)+
geom_point(aes(x=french_rho,y=french_shock,col=as.factor(feasible),size=(log((swiss_rho/swiss_shock)))),alpha=.5)
log((swiss_rho/swiss_shock))
log((d$swiss_rho/d$swiss_shock))
ggplot(d)+
geom_point(aes(x=french_rho,y=french_shock,size=as.factor(feasible),col=(log((swiss_rho/swiss_shock)))),alpha=.5)
ggplot(d)+
ggplot(d)+
geom_point(aes(x=french_rho,y=french_shock,col=as.factor(feasible),alpha=.5))
ggplot(d)+
geom_point(aes(x=french_rho,y=french_shock,col=as.factor(feasible),alpha=.5))
glm(feasible~swiss_rho+french_rho+germ_rho+swiss_shock+french_shock+germ_shock,data=d,family="binomial")
glm(feasible~swiss_rho+french_rho+germ_rho+swiss_shock+french_shock+germ_shock,data=d,family="binomial") %>% summary()
lm(price~swiss_rho+french_rho+germ_rho+swiss_shock+french_shock+germ_shock,data=d)
lm(cost~swiss_rho+french_rho+germ_rho+swiss_shock+french_shock+germ_shock,data=d)
lm(cost~swiss_rho+french_rho+germ_rho+swiss_shock+french_shock+germ_shock,data=d) %>% summary()
lm(cost~swiss_rho+french_rho+germ_rho+swiss_shock+french_shock+germ_shock,data=d) %>% plot()
lm(cost~swiss_rho+french_rho+germ_rho+swiss_shock+french_shock+germ_shock+feasible,data=d)
lm(cost~swiss_rho+french_rho+germ_rho+swiss_shock+french_shock+germ_shock+feasible,data=d) %>% plot()
lm(cost~swiss_rho+french_rho+germ_rho+swiss_shock+french_shock+germ_shock+feasible,data=d) %>% plot()
shapiro.test(out_full)
